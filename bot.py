
from turtle import pos
import telebot
from telebot import types

#TRUE ‚Äì 6019076174:AAH9Sl7icwRbEz5okECl4fVR84BCzLbdYAM
#TEST ‚Äì 6270339225:AAG6f1r1cMEQa1h7LHgQJDKhHr7GTSg3_fU
bot = telebot.TeleBot('6019076174:AAH9Sl7icwRbEz5okECl4fVR84BCzLbdYAM')

menu_phase = '0'

class post:
    caption = ''
    photo = ''
    address = ''
    btn_setup = [[]]
    message_id = -1
    markup = types.InlineKeyboardMarkup(row_width=3)

@bot.message_handler(commands=['start'])
def start(message):
    post.caption = ''
    post.photo = ''
    post.address = ''
    post.btn_setup = [[]]
    post.message_id = -1
    post.markup = types.InlineKeyboardMarkup(row_width=3)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton("–ù–æ–≤—ã–π –ø–æ—Å—Ç üñº")
    markup.add(btn)

    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤ —Å –∫–Ω–æ–ø–æ—á–∫–∞–º–∏")
    bot.send_message(message.chat.id, "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–≤–æ–π –ø–æ—Å—Ç–∏–∫! üî•üî•üî•", reply_markup=markup)
   
    

    
@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    global menu_phase 

    if message.text == '–ù–æ–≤—ã–π –ø–æ—Å—Ç üñº':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn = types.KeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå")
        markup.add(btn)

        bot.send_message(message.chat.id, "–ü—Ä–∏–¥—É–º–∞–π –Ω–∞–¥–ø–∏—Å—å –¥–ª—è –ø–æ—Å—Ç–∞...")
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –µ–≥–æ –∑–¥–µ—Å—å ‚úèÔ∏è:", reply_markup=markup)
        bot.register_next_step_handler(message, post_caption)

    elif message.text == "–û—Ç–º–µ–Ω–∞ ‚ùå" or message.text == "–°–¥–µ–ª–∞—Ç—å –µ—â–µ —Ä–∞–∑ üîÅ":
        post.caption = ''
        post.photo = ''
        post.address = ''
        post.btn_setup = [[]]
        post.message_id = -1
        post.markup = types.InlineKeyboardMarkup(row_width=3)
        menu_phase = ''
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn = types.KeyboardButton("/start")
        markup.add(btn)
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ '/start' –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=markup)


@bot.message_handler(content_types=['photo'])
def get_text_messages(message):
    if menu_phase == 'choose_photos':
        #choose_photos(message)
        print()

def post_caption(message):
    post.caption = message.text
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton("–û—Å—Ç–∞–≤–ª—é –±–µ–∑ —Ñ–æ—Ç–æ‚úñÔ∏è")
    markup.add(btn)

    bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ!üéäüéäüéä \n–¢–µ–ø–µ—Ä—å –≤—Ä–µ–º—è –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Ç–≤–æ–µ–º—É –ø–æ—Å—Ç—É!")
    bot.send_message(message.chat.id, "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏ —è –≤—Å–µ —Å–∫–æ–º–ø–∞–Ω—É—é ü§ñ", reply_markup=markup)

    bot.register_next_step_handler(message, post_image)

def post_image(message):
    if message.text != '–û—Å—Ç–∞–≤–ª—é –±–µ–∑ —Ñ–æ—Ç–æ‚úñÔ∏è':
        post.photo = message.photo[0].file_id 

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚ûï")
    btn2 = types.KeyboardButton("–ö–Ω–æ–ø–∫–∏ –≥–æ—Ç–æ–≤—ã! ‚úÖ")
    markup.add(btn1, btn2)

    bot.send_message(message.chat.id, "–ù–∞—á–Ω–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ \n\n    My_btn_text - My_alert \n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–Ω–æ–ø–æ–∫, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞ –ø–∞–Ω–µ–ª–∏")
    bot.send_message(message.chat.id, "–¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø–æ—Å—Ç üîé‚§µÔ∏è:... ", reply_markup=markup)

    if message.text != '–û—Å—Ç–∞–≤–ª—é –±–µ–∑ —Ñ–æ—Ç–æ‚úñÔ∏è':
        post_message = bot.send_photo(message.chat.id, post.photo, post.caption, reply_markup=post.markup)
    else:
        post_message = bot.send_message(message.chat.id, post.caption, reply_markup=post.markup)
    post.message_id = post_message.message_id 

    bot.register_next_step_handler(message, post_buttons)

def post_buttons(message):
    btn_info = message.text

    if btn_info.find('-') != -1:
        btn_info = btn_info.split('-')

        btn_info[0] = btn_info[0].strip()
        btn_info[1] = btn_info[1].strip()

        if 'http' in btn_info[1]:
            btn = types.InlineKeyboardButton(text=btn_info[0], url=btn_info[1])
        else:
            btn = types.InlineKeyboardButton(text=btn_info[0], callback_data=btn_info[1])
        
        post.btn_setup[len(post.btn_setup) - 1].append(btn)
        post.markup = types.InlineKeyboardMarkup(row_width=3)

        for row in range(len(post.btn_setup)):
            post.markup.row(*post.btn_setup[row])

        bot.delete_message(message.chat.id, message.message_id)

        bot.edit_message_reply_markup(message.chat.id, post.message_id, reply_markup=post.markup)

        bot.register_next_step_handler(message, post_buttons)

    elif message.text == '–ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚ûï':
        bot.delete_message(message.chat.id, message.message_id)
        post.btn_setup.append([])
        bot.register_next_step_handler(message, post_buttons)
    elif message.text == '–ö–Ω–æ–ø–∫–∏ –≥–æ—Ç–æ–≤—ã! ‚úÖ':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞–Ω–∞–ª –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç... \n(–ù–µ –∑–∞–±—É–¥—å —Å–ø–µ—Ä–≤–∞ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞)", reply_markup=markup)
        bot.register_next_step_handler(message, post_address)
    #row_width= len(post.btn_setup) 

def post_address(message):
    post.address = message.text
    print(post.address)
    if post.photo != '':
        bot.send_photo(post.address, post.photo, post.caption, reply_markup=post.markup)
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤–∏–ª))) –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è")
    else:
        bot.send_message(post.address, post.caption, reply_markup=post.markup)
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤–∏–ª))) –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è")
    
@bot.callback_query_handler(func= lambda call: True)
def callback(call):
    bot.answer_callback_query(call.id, call.data, show_alert=True)

bot.polling(non_stop=True) 